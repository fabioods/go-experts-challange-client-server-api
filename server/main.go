package main

import (
	"context"
	"database/sql"
	"encoding/json"
	_ "github.com/mattn/go-sqlite3"
	"io"
	"log"
	"net/http"
	"time"
)

const (
	ApiURL          = "https://economia.awesomeapi.com.br/json/last/USD-BRL"
	ApiTimeOut      = 200 * time.Millisecond
	DatabaseTimeOut = 10 * time.Millisecond
	DBFile          = "cotacao.sqlite"
)

type Usdbrl struct {
	Code       string `json:"code"`
	Codein     string `json:"codein"`
	Name       string `json:"name"`
	High       string `json:"high"`
	Low        string `json:"low"`
	VarBid     string `json:"varBid"`
	PctChange  string `json:"pctChange"`
	Bid        string `json:"bid"`
	Ask        string `json:"ask"`
	Timestamp  string `json:"timestamp"`
	CreateDate string `json:"create_date"`
}
type AutoGenerated struct {
	Usdbrl `json:"USDBRL"`
}

func main() {

	db, err := sql.Open("sqlite3", DBFile)
	if err != nil {
		panic(err)
	}
	defer db.Close()

	err = createTable(db)
	if err != nil {
		panic(err)
	}

	http.HandleFunc("/cotacao", func(w http.ResponseWriter, r *http.Request) {
		contextApi, cancel := context.WithTimeout(r.Context(), ApiTimeOut)
		defer cancel()

		contextDatabase, cancelDB := context.WithTimeout(r.Context(), DatabaseTimeOut)
		defer cancelDB()

		value, err := makeRequest(contextApi)
		if err != nil {
			log.Fatal("Request Error ", err)
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		err = insertValue(contextDatabase, db, value)
		if err != nil {
			log.Fatal("Insert Error ", err)
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		json.NewEncoder(w).Encode(value.Bid)
	})

	log.Println("Server running on port", 8080)
	http.ListenAndServe(":8080", nil)

}

func makeRequest(contextApi context.Context) (Usdbrl, error) {
	request, err := http.NewRequestWithContext(contextApi, http.MethodGet, ApiURL, nil)
	if err != nil {
		return Usdbrl{}, err
	}

	response, err := http.DefaultClient.Do(request)
	defer response.Body.Close()
	if err != nil {
		return Usdbrl{}, err
	}

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return Usdbrl{}, err
	}

	var value AutoGenerated
	err = json.Unmarshal(body, &value)
	if err != nil {
		return Usdbrl{}, err
	}

	return value.Usdbrl, nil
}

func createTable(db *sql.DB) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS cotacao (id INTEGER PRIMARY KEY, bid TEXT, timestamp TEXT)")
	if err != nil {
		return err
	}
	return nil
}

func insertValue(context context.Context, db *sql.DB, value Usdbrl) error {
	smt, err := db.Prepare("INSERT INTO cotacao (bid, timestamp) VALUES (?, ?)")
	if err != nil {
		return err
	}
	defer smt.Close()
	_, err = smt.ExecContext(context, value.Bid, value.Timestamp)
	if err != nil {
		return err
	}
	return nil
}
